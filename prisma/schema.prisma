generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  firstName    String?
  lastName     String?
  password     String
  email        String?       @unique
  phoneNo      String?
  avatar       String
  status       UserStatus    @default(ACTIVATE)
  reservations Reservation[]
  reviews      Review[]
  vendor       Vendor?
  admin        Admin?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

enum UserStatus {
  ACTIVATE
  BANNED
  DEACTIVATE
}

model Vendor {
  id        String       @id @default(cuid())
  username  String       @unique
  userId    String       @unique
  certified Boolean      @default(false)
  status    VendorStatus @default(PENDING)
  desc      String
  user      User         @relation(fields: [userId], references: [id])
  products  Product[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

enum VendorStatus {
  PENDING
  ACCEPTED
  BANNED
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Reservation {
  id         String    @id @default(cuid())
  userId     String
  customer   User      @relation(fields: [userId], references: [id])
  discountId String?
  discount   Discount? @relation(fields: [discountId], references: [id])
  total      Int

  createdAt         DateTime            @default(now()) @map(name: "created_at")
  updatedAt         DateTime            @updatedAt @map(name: "updated_at")
  ProuctReservation ProuctReservation[]
}

model ProuctReservation {
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  quantity      Int
  startAt       DateTime    @default(now())
  endAt         DateTime?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@id([productId, reservationId])
}

model Product {
  id             String              @id @default(cuid())
  vendorUsername String
  category       Category            @default(Hospitality)
  vendor         Vendor              @relation(fields: [vendorUsername], references: [username])
  name           String
  images         String[]
  address        String
  price          Int                 @db.Integer
  desc           String              @db.Text
  reviews        Review[]
  reservation    ProuctReservation[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Review {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  rating    Int
  feedback  String  @db.Text

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Discount {
  id          String        @id @default(cuid())
  name        String
  desc        String        @default("")
  amount      Int
  reservation Reservation[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

enum Category {
  Healthcare
  Transportation
  Legal
  Financial
  Education
  Maintenance_N_repair
  F_N_B
  Retail
  Hospitality
}
