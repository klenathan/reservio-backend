generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions", "fullTextSearch"]
  binaryTargets   = env("PRISMA_CLI_BINARY_TARGETS")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  firstName    String?
  lastName     String?
  password     String
  email        String?       @unique
  phoneNo      String?
  avatar       String
  status       UserStatus    @default(PENDING)
  reservations Reservation[]
  reviews      Review[]
  vendor       Vendor?
  admin        Admin?

  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  Ledger           Ledger[]
  confirmationCode confirmationCode?

  @@map(name: "users")
}

model confirmationCode {
  id          String @id @default(uuid())
  user        User   @relation(fields: [userId], references: [id])
  userId      String @unique
  confirmCode String
}

enum UserStatus {
  PENDING
  ACTIVATE
  BANNED
  DEACTIVATE
}

model Vendor {
  id        String       @id @default(cuid())
  username  String       @unique
  name      String
  userId    String       @unique
  certified Boolean      @default(false)
  status    VendorStatus @default(PENDING)
  phone     String?
  desc      String
  user      User         @relation(fields: [userId], references: [id])
  products  Product[]
  category  Category[]   @default([Hospitality])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}


enum VendorStatus {
  PENDING
  ACCEPTED
  BANNED
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Ledger {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  path      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  category  Category
}

model Reservation {
  id       String @id @default(cuid())
  userId   String
  customer User   @relation(fields: [userId], references: [id])

  quantity Int
  status   ReservationStatus @default(PENDING)
  total    Int

  discount   Discount? @relation(fields: [discountId], references: [id])
  discountId String?

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  ProductFixedTimeSlot   ProductFixedTimeSlot? @relation(fields: [productFixedTimeSlotId], references: [id])
  productFixedTimeSlotId String?

  startAt DateTime?
  endAt   DateTime?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

enum ReservationStatus {
  PENDING
  REJECTED
  ACCEPTED
  ONGOING
  FINISHED
}

model Product {
  id       String      @id @default(cuid())
  vendorId String
  category Category    @default(Others)
  vendor   Vendor      @relation(fields: [vendorId], references: [id])
  name     String
  address  String
  price    Int         @db.Integer
  desc     String      @db.Text
  quantity Int         @default(0)
  type     ProductType @default(FLEXIBLE)

  images      String[]
  reviews     Review[]
  Reservation Reservation[]

  ProductFixedTimeSlot ProductFixedTimeSlot[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

enum ProductType {
  FIXED
  FLEXIBLE
}

model ProductFixedTimeSlot {
  id                String        @id @default(uuid())
  product           Product       @relation(fields: [productId], references: [id])
  productId         String
  from              DateTime
  to                DateTime
  quantity          Int
  ProuctReservation Reservation[]
}

model Review {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  rating    Int
  feedback  String  @db.Text

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Discount {
  id          String        @id @default(cuid())
  name        String
  desc        String        @default("")
  amount      Int
  image       String
  start       DateTime      @default(now())
  end         DateTime
  reservation Reservation[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

enum Category {
  Healthcare
  Transportation
  Legal
  Financial
  Education
  Maintenance_N_repair
  F_N_B
  Retail
  Hospitality
  Others
}
